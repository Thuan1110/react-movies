{"version":3,"file":"static/js/789.f9ccc1d3.chunk.js","mappings":"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","sources":["webpack://react-movies/./src/components/Movies/Item/MoviesListItem.module.css?e30d","components/Movies/Item/MoviesListItem.js","webpack://react-movies/./src/components/Movies/List/MoviesList.module.css?6fec","components/Movies/List/MoviesList.js","webpack://react-movies/./src/components/UI/Card.module.css?26d0","components/UI/Card.js","config/api-config.js","webpack://react-movies/./src/components/Movies/Detail/MovieDetail.module.css?5669","components/Movies/Detail/MovieDetail.js","webpack://react-movies/./src/components/Movies/Detail/MovieTrailer.module.css?26df","components/Movies/Detail/MovieTrailer.js","pages/Detail.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MoviesListItem_item__nwcOR\",\"card\":\"MoviesListItem_card__2k9-x\",\"link\":\"MoviesListItem_link__34khC\"};","import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { IMG_PATH } from \"../../../config/api-config\";\r\nimport Card from \"../../UI/Card\";\r\n\r\nimport styles from \"./MoviesListItem.module.css\";\r\n\r\nconst MoviesListItem = (props) => {\r\n  const { id, title, posterPath, category } = props;\r\n  const imagePath = IMG_PATH + \"/\" + posterPath;\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const navigation = () => {\r\n    navigate(`/${category}/${id}`);\r\n  };\r\n\r\n  return (\r\n    <li className={styles.item} key={id}>\r\n      <Card className={styles.card} onClick={navigation}>\r\n        <img src={imagePath} alt=\"movie images\" />\r\n        <p>{title}</p>\r\n      </Card>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default MoviesListItem;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"movies\":\"MoviesList_movies__nZF87\",\"sub\":\"MoviesList_sub__yBgEX\",\"title\":\"MoviesList_title__TSR3T\",\"action\":\"MoviesList_action__fdqQ9\",\"link-text\":\"MoviesList_link-text__F3DwE\"};","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport MoviesListItem from \"../Item/MoviesListItem\";\r\nimport styles from \"./MoviesList.module.css\";\r\n\r\nconst MoviesList = (props) => {\r\n  const { movies, category, title } = props;\r\n  let link = \"\";\r\n  if (category === \"movie\") {\r\n    link = \"movies\";\r\n  } else {\r\n    link = \"tvs\";\r\n  }\r\n  return (\r\n    <div className={styles.movies}>\r\n      <div className={styles.sub}>\r\n        <p className={styles.title}>{title}</p>\r\n        <Link to={`/${link}`} className={styles[\"link-text\"]}>\r\n          <p className={styles.action}>View More</p>\r\n        </Link>\r\n      </div>\r\n      <ul>\r\n        {movies.map((movie) => (\r\n          <MoviesListItem\r\n            key={movie.id}\r\n            id={movie.id}\r\n            title={movie.title ? movie.title : movie.name}\r\n            posterPath={movie.poster_path}\r\n            category={category}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoviesList;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__pxqgE\"};","import React from \"react\";\r\nimport styles from \"./Card.module.css\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <section\r\n      className={`${styles.card} ${props.className ? props.className : \"\"}`}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.children}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","export const API_KEY = \"5e00f70ef1569dd8369c628b4c45f718\";\r\nexport const BASE_URL = \"https://api.themoviedb.org/3\";\r\nexport const IMG_PATH = \"https://image.tmdb.org/t/p/w500\";\r\nexport const ORIGINAL_PATH = \"https://image.tmdb.org/t/p/original\";\r\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"MovieDetail_background__LLIEm\",\"container\":\"MovieDetail_container__ClIy4\",\"poster\":\"MovieDetail_poster__Cel6B\",\"card\":\"MovieDetail_card__uqXTm\",\"btn\":\"MovieDetail_btn__IL5na\",\"title\":\"MovieDetail_title__wrmJW\",\"genres-container\":\"MovieDetail_genres-container__RnG0m\",\"genres-list\":\"MovieDetail_genres-list__r-Rn5\",\"overview\":\"MovieDetail_overview__DEnpG\",\"casts\":\"MovieDetail_casts__x8Brt\",\"casts-list\":\"MovieDetail_casts-list__F5-bS\",\"release-date\":\"MovieDetail_release-date__K9zmm\",\"character\":\"MovieDetail_character__nFUFP\"};","import React from \"react\";\r\nimport { IMG_PATH } from \"../../../config/api-config\";\r\nimport Card from \"../../UI/Card\";\r\nimport styles from \"./MovieDetail.module.css\";\r\n\r\nconst MovieDetail = (props) => {\r\n  const { movieData, castData, backDropPath, posterPath, category } = props;\r\n\r\n  let genres = movieData.genres.map((genre) => (\r\n    <ul className={styles[\"genres-list\"]}>\r\n      <li key={genre.id}>{genre.name}</li>\r\n    </ul>\r\n  ));\r\n\r\n  let castsList = castData.map((cast) => (\r\n    <ul className={styles[\"casts-list\"]}>\r\n      <li key={cast.cast_id}>\r\n        {cast.profile_path === null ? (\r\n          <div>\r\n            <img\r\n              src=\"/src/assets/360_F_251955356_FAQH0U1y1TZw3ZcdPGybwUkH90a3VAhb.jpg\"\r\n              alt=\"\"\r\n            />\r\n          </div>\r\n        ) : (\r\n          <img src={`${IMG_PATH}/${cast.profile_path}`} alt=\"\" />\r\n        )}\r\n        <p>{cast.name}</p>\r\n        <p className={styles.character}>{cast.character}</p>\r\n      </li>\r\n    </ul>\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.background}>\r\n        <img src={backDropPath} alt=\"\" />\r\n      </div>\r\n\r\n      <div className={styles.container}>\r\n        <div className={styles.poster}>\r\n          <Card className={styles.card}>\r\n            <img src={posterPath} alt=\"\" />\r\n            <button className={styles.btn}>Play</button>\r\n          </Card>\r\n        </div>\r\n        <div className={styles.detail}>\r\n          <p className={styles.title}>\r\n            {category === \"movie\" ? movieData.title : movieData.name}\r\n          </p>\r\n          <p className={styles[\"release-date\"]}>\r\n            <span> Release date:</span>\r\n            {category === \"movie\"\r\n              ? movieData.releaseDate\r\n              : movieData.firstAirDate}\r\n          </p>\r\n          <div className={styles[\"genres-container\"]}>{genres}</div>\r\n          <p className={styles.overview}>\r\n            {category === \"movie\" ? movieData.overview : movieData.overview}\r\n          </p>\r\n\r\n          <span>Casts</span>\r\n          <div className={styles.casts}>{castsList}</div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieDetail;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"trailer\":\"MovieTrailer_trailer__Yp5H7\"};","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport YouTube from \"react-youtube\";\r\nimport { API_KEY, BASE_URL } from \"../../../config/api-config\";\r\nimport styles from \"./MovieTrailer.module.css\";\r\n\r\nconst MovieTrailer = (props) => {\r\n  const [trailers, setTrailers] = useState([]);\r\n  const { id, category } = props;\r\n\r\n  const fetchVideos = useCallback(async () => {\r\n    const response = await fetch(\r\n      `${BASE_URL}/${category}/${id}/videos?api_key=${API_KEY}&language=en-US`\r\n    );\r\n    const data = await response.json();\r\n    const trailerType = data.results.filter(\r\n      (result) => result.type === \"Trailer\"\r\n    );\r\n    setTrailers(trailerType);\r\n  }, [category, id]);\r\n\r\n  useEffect(() => {\r\n    fetchVideos();\r\n  }, [fetchVideos]);\r\n\r\n  const opts = {\r\n    height: \"720\",\r\n    width: \"1200\",\r\n    playerVars: {\r\n      origin: window.location.href,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className={styles.trailer}>\r\n      <p>Trailers</p>\r\n      {trailers.length > 0 &&\r\n        trailers.map((trailer) => (\r\n          <YouTube videoId={trailer.key} opts={opts} />\r\n        ))}\r\n      {trailers.length === 0 && <p className=\"centered\">No Trailers Found!</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieTrailer;\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport MovieDetail from \"../components/Movies/Detail/MovieDetail\";\r\nimport MovieTrailer from \"../components/Movies/Detail/MovieTrailer\";\r\nimport MoviesList from \"../components/Movies/List/MoviesList\";\r\nimport Loader from \"../components/UI/Loader\";\r\nimport {\r\n  API_KEY,\r\n  BASE_URL,\r\n  IMG_PATH,\r\n  ORIGINAL_PATH,\r\n} from \"../config/api-config\";\r\n\r\nconst Detail = () => {\r\n  const params = useParams();\r\n  const { id, category } = params;\r\n\r\n  const [movieData, setMovieData] = useState({\r\n    backDropPath: \"\",\r\n    title: \"\",\r\n    posterPath: \"\",\r\n    genres: [],\r\n    overview: \"\",\r\n    releaseDate: \"\",\r\n    name: \"\",\r\n    firstAirDate: \"\",\r\n  });\r\n\r\n  const [casts, setCasts] = useState([]);\r\n  const [similarMovies, setSimilarMovies] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const backGroundImg = ORIGINAL_PATH + \"/\" + movieData.backDropPath;\r\n  const posterImg = IMG_PATH + \"/\" + movieData.posterPath;\r\n\r\n  const fetchMovieDetail = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(\r\n        `${BASE_URL}/${category}/${id}?api_key=${API_KEY}&language=en-US`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      const backDropPath = data.backdrop_path;\r\n      const title = data.title;\r\n      const posterPath = data.poster_path;\r\n      const genres = data.genres;\r\n      const overview = data.overview;\r\n      const releaseDate = data.release_date;\r\n      const name = data.name;\r\n      const firstAirDate = data.first_air_date;\r\n\r\n      setMovieData({\r\n        backDropPath: backDropPath,\r\n        title: title,\r\n        posterPath: posterPath,\r\n        genres: genres,\r\n        overview: overview,\r\n        releaseDate: releaseDate,\r\n        name: name,\r\n        firstAirDate: firstAirDate,\r\n      });\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n    setIsLoading(false);\r\n  }, [category, id]);\r\n\r\n  const fetchCasts = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(\r\n        `${BASE_URL}/${category}/${id}/credits?api_key=${API_KEY}&language=en-US`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      const casts = data.cast.slice(0, 5);\r\n      setCasts(casts);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n    setIsLoading(false);\r\n  }, [category, id]);\r\n\r\n  const fetchSimilarMovies = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(\r\n        `${BASE_URL}/${category}/${id}/similar?api_key=${API_KEY}&language=en-US`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      const similar = data.results.slice(0, 6);\r\n      setSimilarMovies(similar);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n    setIsLoading(false);\r\n  }, [category, id]);\r\n\r\n  useEffect(() => {\r\n    fetchMovieDetail();\r\n    fetchCasts();\r\n    fetchSimilarMovies();\r\n  }, [fetchCasts, fetchMovieDetail, fetchSimilarMovies]);\r\n\r\n  return (\r\n    <>\r\n      {error && <div className=\"centered\">{error}</div>}\r\n      {isLoading && (\r\n        <div className=\"centered\">\r\n          <Loader />\r\n        </div>\r\n      )}\r\n      {!isLoading && (\r\n        <>\r\n          <MovieDetail\r\n            movieData={movieData}\r\n            castData={casts}\r\n            backDropPath={backGroundImg}\r\n            posterPath={posterImg}\r\n            category={category}\r\n          />\r\n          <MovieTrailer key={id} id={id} category={category} />\r\n          <MoviesList\r\n            movies={similarMovies}\r\n            category={category}\r\n            type=\"similar\"\r\n            title=\"Similar movies\"\r\n          />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Detail;\r\n"],"names":["props","id","title","posterPath","category","imagePath","IMG_PATH","navigate","useNavigate","className","styles","Card","onClick","src","alt","movies","link","to","map","movie","name","poster_path","children","API_KEY","BASE_URL","ORIGINAL_PATH","movieData","castData","backDropPath","genres","genre","castsList","cast","profile_path","character","cast_id","releaseDate","firstAirDate","overview","useState","trailers","setTrailers","fetchVideos","useCallback","fetch","response","json","data","trailerType","results","filter","result","type","useEffect","opts","height","width","playerVars","origin","window","location","href","length","trailer","YouTube","videoId","key","params","useParams","setMovieData","casts","setCasts","similarMovies","setSimilarMovies","isLoading","setIsLoading","error","setError","backGroundImg","posterImg","fetchMovieDetail","ok","Error","backdrop_path","release_date","first_air_date","message","fetchCasts","slice","fetchSimilarMovies","similar","Loader","MoviesList"],"sourceRoot":""}